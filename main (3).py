import telebot
from telebot import types
import json
import os
import time
from flask import Flask
import threading

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def index():
    return "I'm alive! Bot is working 24/7", 200

@app.route('/status')
def status():
    return {"status": "alive", "message": "Bot is running", "uptime": "OK"}, 200

@app.route('/keep_alive')
def keep_alive():
    return "OK", 200

@app.route('/health')
def health():
    return "healthy", 200

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7339047878:AAELMJ6agFIl3kuKfx0NdJIBgBYCAm_bOVk"
bot = telebot.TeleBot(TOKEN)

OWNER_ID = 5151502625
CHANNEL_USERNAME = '@brquestionshelper'
ADMINS_FILE = 'admins.json'
DATA_FILE = 'data.json'
USERS_FILE = 'users.json'

def load_admins():
    if os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, 'r') as f:
            return json.load(f)
    return []

def save_admins():
    with open(ADMINS_FILE, 'w') as f:
        json.dump(ADMINS, f)

ADMINS = load_admins()

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            data.setdefault('question_count', 0)
            data.setdefault('pending', {})
            data.setdefault('cooldowns', {})
            data.setdefault('sent_messages', {})
            data.setdefault('history', {})
            data.setdefault('rejected', {})
            return data
    return {
        'question_count': 0,
        'pending': {},
        'cooldowns': {},
        'sent_messages': {},
        'history': {},
        'rejected': {}
    }

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump(DATA, f)

DATA = load_data()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATES = {}

def set_user_state(user_id, state):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    USER_STATES[user_id] = state

def get_user_state(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return USER_STATES.get(user_id, None)

def clear_user_state(user_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in USER_STATES:
        del USER_STATES[user_id]

def save_user(user_id):
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
    else:
        users = []

    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, 'w') as f:
            json.dump(users, f)

def get_user_count():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
        return len(users)
    return 0

def calculate_user_level(user_id):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_history = DATA.get('history', {}).get(str(user_id), [])
    
    total_questions = len(user_history)
    answered_questions = len([q for q in user_history if q.get("answer")])
    
    # –û—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    points = total_questions * 10 + answered_questions * 5
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if points >= 500:
        return 10, "üèÜ –ú–∞—Å—Ç–µ—Ä BR", points
    elif points >= 400:
        return 9, "üíé –≠–∫—Å–ø–µ—Ä—Ç", points
    elif points >= 300:
        return 8, "‚≠ê –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", points
    elif points >= 200:
        return 7, "üî• –û–ø—ã—Ç–Ω—ã–π", points
    elif points >= 150:
        return 6, "‚ö° –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", points
    elif points >= 100:
        return 5, "üéØ –ê–∫—Ç–∏–≤–Ω—ã–π", points
    elif points >= 70:
        return 4, "üìà –†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è", points
    elif points >= 40:
        return 3, "üåü –£—á–∞—Å—Ç–Ω–∏–∫", points
    elif points >= 20:
        return 2, "üöÄ –ù–æ–≤–∏—á–æ–∫+", points
    else:
        return 1, "üë∂ –ù–æ–≤–∏—á–æ–∫", points

def get_level_progress(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    level, title, points = calculate_user_level(user_id)
    
    level_thresholds = [0, 20, 40, 70, 100, 150, 200, 300, 400, 500]
    
    if level < 10:
        next_level_points = level_thresholds[level]
        progress = points - (level_thresholds[level-1] if level > 1 else 0)
        needed = next_level_points - (level_thresholds[level-1] if level > 1 else 0)
        return progress, needed
    else:
        return points, points  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

def is_subscribed(user_id):
    if user_id == OWNER_ID:
        return True
    try:
        status = bot.get_chat_member(CHANNEL_USERNAME, user_id).status
        return status in ['member', 'creator', 'administrator']
    except:
        return False

def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
    btn2 = types.KeyboardButton('üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç')
    
    if message.from_user.id == OWNER_ID:
        btn3 = types.KeyboardButton('üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
        markup.add(btn1, btn2, btn3)
    elif message.from_user.id in ADMINS:
        btn3 = types.KeyboardButton('üìã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞')
        markup.add(btn1, btn2, btn3)
    else:
        markup.add(btn1, btn2)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = (
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ Black Russia ‚Äî "
        "–æ—Ç RP-–æ—Ç—ã–≥—Ä–æ–≤–æ–∫ –¥–æ –∞–¥–º–∏–Ω–∫–∏, –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–æ–∫–∞—á–∫–∏.\n"
        "üì© –ü–∏—à–∏ ‚Äî —è –æ—Ç–≤–µ—á—É –±—ã—Å—Ç—Ä–æ, —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n"
        "üéØ –ü–æ–º–æ–≥–∞—é –Ω–æ–≤–∏—á–∫–∞–º –∏ –æ–ø—ã—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º.\n"
        "‚ö°Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –±–µ–∑ –≤–æ–¥—ã.\n\n"
        "–ù–æ–≤–æ—Å—Ç–∏: @brquestionshelper"
    )

    user_id = message.from_user.id
    save_user(user_id)
    
    if not is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/brquestionshelper")
        markup.add(btn)
        text = "üëã –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
        bot.send_message(user_id, text, reply_markup=markup)
        return
    
    bot.send_message(message.chat.id, welcome_text)
    send_main_menu(message)

@bot.message_handler(func=lambda message: message.text == 'üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
def handle_button(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    set_user_state(message.from_user.id, "asking_question")
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_question"))
    
    text = (
        "üéÆ –ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ!\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –í–∞—à –ù–∏–∫\n"
        "2. –í–∞—à –í–æ–ø—Ä–æ—Å\n\n"
        "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –ë–æ—Ç–µ‚ùóÔ∏è")
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç')
def handle_cabinet(message):
    show_user_history(message.chat.id, page=1, filter_type="all")

@bot.message_handler(func=lambda message: message.text == 'üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
def handle_owner_panel(message):
    if message.from_user.id != OWNER_ID:
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="owner_stats")
    )
    markup.row(
        types.InlineKeyboardButton("üìù –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="all_questions"),
        types.InlineKeyboardButton("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )
    
    bot.send_message(message.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞')
def handle_admin_panel(message):
    if message.from_user.id not in ADMINS:
        return
    
    pending_count = len(DATA.get('pending', {}))
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã ({pending_count})", callback_data="pending_questions")
    )
    
    bot.send_message(message.chat.id, "üìã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "manage_admins")
def handle_manage_admins(call):
    if call.from_user.id != OWNER_ID:
        return
    
    admin_list = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in ADMINS]) if ADMINS else "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
        types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
    )
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_owner"))
    
    bot.edit_message_text(
        f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n{admin_list}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "owner_stats")
def handle_owner_stats(call):
    if call.from_user.id != OWNER_ID:
        return
    
    user_count = get_user_count()
    pending_count = len(DATA.get('pending', {}))
    total_questions = DATA.get('question_count', 0)
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_owner"))
    
    bot.edit_message_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
        f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞: {pending_count}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "all_questions")
def handle_all_questions(call):
    if call.from_user.id != OWNER_ID:
        return
    
    show_all_questions(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "pending_questions")
def handle_pending_questions(call):
    if call.from_user.id not in ADMINS:
        return
    
    pending = DATA.get('pending', {})
    if not pending:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        return
    
    text = "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for q_id, user_id in list(pending.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        user_history = DATA.get('history', {}).get(str(user_id), [])
        question = next((q for q in reversed(user_history) if q.get('id') == q_id), {})
        question_text = question.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å')[:30] + "..."
        
        markup.row(types.InlineKeyboardButton(
            f"‚ùì {q_id}: {question_text}",
            callback_data=f"view_question_{q_id}"
        ))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_question_"))
def handle_view_question(call):
    if call.from_user.id not in ADMINS:
        return
    
    question_id = call.data.split("_")[2]
    user_id = DATA.get('pending', {}).get(question_id)
    
    if not user_id:
        bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_history = DATA.get('history', {}).get(str(user_id), [])
    question = next((q for q in reversed(user_history) if q.get('id') == question_id), {})
    
    if not question:
        bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{question_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{question_id}")
    )
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pending_questions"))
    
    bot.edit_message_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å ‚Ññ{question_id}\n"
        f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}\n\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{question.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å')}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def handle_reject_question(call):
    if call.from_user.id not in ADMINS:
        return
    
    question_id = call.data.split("_")[1]
    set_user_state(call.from_user.id, f"rejecting_{question_id}")
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{question_id}:")
    bot.register_next_step_handler(call.message, process_rejection, question_id, call.from_user.full_name)

def process_rejection(message, question_id, admin_name):
    if message.from_user.id not in ADMINS:
        return
    
    clear_user_state(message.from_user.id)
    
    if question_id not in DATA['pending']:
        bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    
    reason = message.text
    user_id = DATA['pending'].pop(question_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    DATA['rejected'][question_id] = {
        'user_id': user_id,
        'reason': reason,
        'admin': admin_name
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_history = DATA['history'].get(str(user_id), [])
    for entry in reversed(user_history):
        if entry.get('id') == question_id:
            entry['rejected'] = True
            entry['rejection_reason'] = reason
            break
    
    save_data()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.send_message(
            user_id,
            f"‚ùå –í–∞—à –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π."
        )
    except:
        pass
    
    bot.send_message(message.chat.id, f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{question_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMINS:
        try:
            msg_id = DATA['sent_messages'].get(question_id)
            if msg_id:
                bot.edit_message_text(
                    f"‚ùå –í–æ–ø—Ä–æ—Å ‚Ññ{question_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {admin_name}.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                    chat_id=admin_id,
                    message_id=msg_id
                )
        except:
            pass
    
    if question_id in DATA['sent_messages']:
        del DATA['sent_messages'][question_id]
    
    save_data()

def show_all_questions(chat_id, message_id, page=1):
    all_questions = []
    
    for user_id, history in DATA.get('history', {}).items():
        for entry in history:
            all_questions.append({
                'user_id': user_id,
                'question_id': entry.get('id'),
                'question': entry.get('question'),
                'answer': entry.get('answer'),
                'rejected': entry.get('rejected', False),
                'rejection_reason': entry.get('rejection_reason')
            })
    
    all_questions.sort(key=lambda x: int(x['question_id']), reverse=True)
    
    if not all_questions:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_owner"))
        bot.edit_message_text("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", chat_id, message_id, reply_markup=markup)
        return
    
    per_page = 5
    total_pages = (len(all_questions) + per_page - 1) // per_page
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page
    
    text = f"üìù –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    
    markup = types.InlineKeyboardMarkup()
    
    for q in all_questions[start:end]:
        status = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω" if q['rejected'] else ("‚úÖ –û—Ç–≤–µ—á–µ–Ω" if q['answer'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç")
        text += f"{status} ‚Ññ{q['question_id']} –æ—Ç ID {q['user_id']}\n"
        text += f"‚ùì –í–æ–ø—Ä–æ—Å: {q['question']}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if q['answer']:
            text += f"üí¨ –û—Ç–≤–µ—Ç: {q['answer']}\n"
        elif q['rejected']:
            text += f"üö´ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {q.get('rejection_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if not q['answer'] and not q['rejected']:
            markup.row(
                types.InlineKeyboardButton(
                    f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ‚Ññ{q['question_id']}", 
                    callback_data=f"owner_reply_{q['question_id']}"
                ),
                types.InlineKeyboardButton(
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚Ññ{q['question_id']}", 
                    callback_data=f"owner_reject_{q['question_id']}"
                )
            )
        text += "\n"
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"all_q_page_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"all_q_page_{page+1}"))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_owner"))
    
    bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("all_q_page_"))
def handle_all_questions_page(call):
    if call.from_user.id != OWNER_ID:
        return
    
    page = int(call.data.split("_")[3])
    show_all_questions(call.message.chat.id, call.message.message_id, page)

@bot.callback_query_handler(func=lambda call: call.data.startswith("owner_reply_"))
def handle_owner_reply(call):
    if call.from_user.id != OWNER_ID:
        return
    
    question_id = call.data.split("_")[2]
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–ø—Ä–æ—Å—É
    user_id = None
    for uid, history in DATA.get('history', {}).items():
        for entry in history:
            if entry.get('id') == question_id and not entry.get('answer') and not entry.get('rejected'):
                user_id = int(uid)
                break
        if user_id:
            break
    
    if not user_id:
        bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return
    
    set_user_state(call.from_user.id, f"owner_replying_{question_id}")
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, f"üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id}:")
    bot.register_next_step_handler(call.message, process_owner_reply, question_id, user_id)

def process_owner_reply(message, question_id, user_id):
    if message.from_user.id != OWNER_ID:
        return
    
    clear_user_state(message.from_user.id)

    answer_text = message.text
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending –µ—Å–ª–∏ –µ—Å—Ç—å
        if question_id in DATA.get('pending', {}):
            del DATA['pending'][question_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = DATA['history'].get(str(user_id), [])
        question_text = None
        for entry in reversed(history):
            if entry['id'] == question_id:
                entry['answer'] = answer_text
                question_text = entry.get("question", "–í–∞—à –≤–æ–ø—Ä–æ—Å")
                break

        if question_text:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data=f"getanswer_{question_id}"))
            bot.send_message(user_id, f"üì® –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n\n{question_text}", reply_markup=markup)
            bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        save_data()

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("owner_reject_"))
def handle_owner_reject(call):
    if call.from_user.id != OWNER_ID:
        return
    
    question_id = call.data.split("_")[2]
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–ø—Ä–æ—Å—É
    user_id = None
    for uid, history in DATA.get('history', {}).items():
        for entry in history:
            if entry.get('id') == question_id and not entry.get('answer') and not entry.get('rejected'):
                user_id = int(uid)
                break
        if user_id:
            break
    
    if not user_id:
        bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return
    
    set_user_state(call.from_user.id, f"owner_rejecting_{question_id}")
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, f"üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{question_id}:")
    bot.register_next_step_handler(call.message, process_owner_rejection, question_id, user_id)

def process_owner_rejection(message, question_id, user_id):
    if message.from_user.id != OWNER_ID:
        return
    
    clear_user_state(message.from_user.id)

    reason = message.text
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending –µ—Å–ª–∏ –µ—Å—Ç—å
        if question_id in DATA.get('pending', {}):
            del DATA['pending'][question_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        DATA['rejected'][question_id] = {
            'user_id': user_id,
            'reason': reason,
            'admin': '–í–ª–∞–¥–µ–ª–µ—Ü'
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = DATA['history'].get(str(user_id), [])
        for entry in reversed(history):
            if entry.get('id') == question_id:
                entry['rejected'] = True
                entry['rejection_reason'] = reason
                break
        
        save_data()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                user_id,
                f"‚ùå –í–∞—à –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π."
            )
        except:
            pass
        
        bot.send_message(message.chat.id, f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{question_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "add_admin")
def handle_add_admin(call):
    if call.from_user.id != OWNER_ID:
        return
    
    set_user_state(call.from_user.id, "adding_admin")
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:")
    bot.register_next_step_handler(call.message, process_add_admin)

def process_add_admin(message):
    if message.from_user.id != OWNER_ID:
        return
    
    clear_user_state(message.from_user.id)
    
    try:
        admin_id = int(message.text)
        if admin_id not in ADMINS:
            ADMINS.append(admin_id)
            save_admins()
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: ID {admin_id}")
            try:
                bot.send_message(admin_id, "üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            except:
                pass
        else:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
def handle_remove_admin(call):
    if call.from_user.id != OWNER_ID:
        return
    
    set_user_state(call.from_user.id, "removing_admin")
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(call.message, process_remove_admin)

def process_remove_admin(message):
    if message.from_user.id != OWNER_ID:
        return
    
    clear_user_state(message.from_user.id)
    
    try:
        admin_id = int(message.text)
        if admin_id in ADMINS:
            ADMINS.remove(admin_id)
            save_admins()
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω: ID {admin_id}")
            try:
                bot.send_message(admin_id, "‚ùå –° –≤–∞—Å —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            except:
                pass
        else:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def handle_broadcast_callback(call):
    if call.from_user.id != OWNER_ID:
        return
    
    set_user_state(call.from_user.id, "waiting_broadcast")
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast"))
    
    bot.edit_message_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>)",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    bot.register_next_step_handler(call.message, send_broadcast)

def send_broadcast(message):
    if message.from_user.id != OWNER_ID:
        return
    
    clear_user_state(message.from_user.id)
    
    text = message.text
    sent = 0
    failed = 0

    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
    else:
        users = []

    for user_id in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(user_id, text, parse_mode='HTML')
            sent += 1
        except:
            failed += 1

    bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_broadcast")
def handle_cancel_broadcast(call):
    if call.from_user.id != OWNER_ID:
        return
    
    clear_user_state(call.from_user.id)
    bot.answer_callback_query(call.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="owner_stats")
    )
    markup.row(
        types.InlineKeyboardButton("üìù –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="all_questions"),
        types.InlineKeyboardButton("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )
    
    bot.edit_message_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_question")
def handle_cancel_question(call):
    clear_user_state(call.from_user.id)
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    send_main_menu(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_owner")
def handle_back_to_owner(call):
    if call.from_user.id != OWNER_ID:
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="owner_stats")
    )
    markup.row(
        types.InlineKeyboardButton("üìù –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="all_questions"),
        types.InlineKeyboardButton("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )
    
    bot.edit_message_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞:", call.message.chat.id, call.message.message_id, reply_markup=markup)

def show_user_history(chat_id, page=1, filter_type="all"):
    user_id = str(chat_id)
    all_history = DATA.get('history', {}).get(user_id, [])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
    level, title, points = calculate_user_level(chat_id)
    progress, needed = get_level_progress(chat_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_questions = len(all_history)
    answered_questions = len([q for q in all_history if q.get("answer")])
    rejected_questions = len([q for q in all_history if q.get("rejected")])
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if level < 10:
        progress_bar = "‚ñì" * (progress * 10 // needed) + "‚ñë" * (10 - (progress * 10 // needed))
        level_info = f"üéÆ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\n\n" \
                    f"üë§ –£—Ä–æ–≤–µ–Ω—å: {level} {title}\n" \
                    f"‚≠ê –û—á–∫–∏: {points}\n" \
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{needed}\n" \
                    f"[{progress_bar}]\n\n" \
                    f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                    f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {total_questions}\n" \
                    f"‚úÖ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {answered_questions}\n" \
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_questions}\n\n"
    else:
        level_info = f"üéÆ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\n\n" \
                    f"üë§ –£—Ä–æ–≤–µ–Ω—å: {level} {title}\n" \
                    f"‚≠ê –û—á–∫–∏: {points}\n" \
                    f"üèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨!\n\n" \
                    f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                    f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {total_questions}\n" \
                    f"‚úÖ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {answered_questions}\n" \
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_questions}\n\n"

    if filter_type == "answered":
        history = [q for q in all_history if q.get("answer")]
    elif filter_type == "unanswered":
        history = [q for q in all_history if not q.get("answer") and not q.get("rejected")]
    elif filter_type == "rejected":
        history = [q for q in all_history if q.get("rejected")]
    else:
        history = all_history

    if not history:
        text = level_info + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É."
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üìÑ –í—Å–µ", callback_data="filter_all"),
            types.InlineKeyboardButton("‚úÖ –° –æ—Ç–≤–µ—Ç–æ–º", callback_data="filter_answered"))
        markup.row(
            types.InlineKeyboardButton("‚úâÔ∏è –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞", callback_data="filter_unanswered"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="filter_rejected"))
        bot.send_message(chat_id, text, reply_markup=markup)
        return

    per_page = 3
    total_pages = (len(history) + per_page - 1) // per_page
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page

    text = level_info + f"üìã –¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ({filter_type}) ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}:\n\n"
    for i, pair in enumerate(history[start:end], start=start + 1):
        question = pair.get("question", "‚Äî")
        if pair.get("rejected"):
            status = "‚ùå"
        elif pair.get("answer"):
            status = "‚úÖ"
        else:
            status = "‚è≥"
        text += f"{status} {i}. {question}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if pair.get("answer"):
            text += f"üí¨ –û—Ç–≤–µ—Ç: {pair['answer']}\n"
        elif pair.get("rejected"):
            text += f"üö´ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {pair.get('rejection_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += "\n"

    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}_{filter_type}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"page_{page+1}_{filter_type}"))
    
    if nav_buttons:
        markup.row(*nav_buttons)

    markup.row(
        types.InlineKeyboardButton("üìÑ –í—Å–µ", callback_data="filter_all"),
        types.InlineKeyboardButton("‚úÖ –° –æ—Ç–≤–µ—Ç–æ–º", callback_data="filter_answered"))
    markup.row(
        types.InlineKeyboardButton("‚úâÔ∏è –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞", callback_data="filter_unanswered"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="filter_rejected"))

    bot.send_message(chat_id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
def handle_page_callback(call):
    parts = call.data.split('_')
    page = int(parts[1])
    filter_type = parts[2]
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_user_history(call.message.chat.id, page=page, filter_type=filter_type)

@bot.callback_query_handler(func=lambda call: call.data.startswith('filter_'))
def handle_filter_callback(call):
    filter_type = call.data.split('_')[1]
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_user_history(call.message.chat.id, page=1, filter_type=filter_type)

@bot.message_handler(func=lambda message: True)
def forward_to_admins(message):
    user = message.from_user
    user_id = user.id
    question_text = message.text
    username = user.username or '–±–µ–∑_–Ω–∏–∫–∞'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = get_user_state(user_id)
    if user_state and user_state != "asking_question":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/brquestionshelper")
        markup.add(btn)
        bot.send_message(user_id, "üëã –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=markup)
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    if message.text.startswith('/') or message.text in ['üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç', 'üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞']:
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "asking_question", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_state != "asking_question":
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    clear_user_state(user_id)

    now = int(time.time())
    last_time = DATA['cooldowns'].get(str(user_id), 0)
    if now - last_time < 60:
        bot.send_message(user_id, "–ü–æ–¥–æ–∂–¥–∏ 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.")
        return

    DATA['cooldowns'][str(user_id)] = now
    DATA['question_count'] += 1
    question_id = str(DATA['question_count'])
    DATA['pending'][question_id] = user_id

    if str(user_id) not in DATA['history']:
        DATA['history'][str(user_id)] = []

    DATA['history'][str(user_id)].append({
        "id": question_id,
        "question": question_text,
        "answer": None,
        "rejected": False
    })

    save_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{question_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{question_id}")
            )
            msg = bot.send_message(
                admin_id,
                f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id}\n"
                f"üë§ –û—Ç @{username} (ID: {user_id}):\n\n"
                f"üìù {question_text}",
                reply_markup=markup)
            DATA['sent_messages'][question_id] = msg.message_id
        except:
            pass

    save_data()
    bot.send_message(user_id, "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_reply_callback(call):
    if call.from_user.id not in ADMINS:
        bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–≤–µ—á–∞—Ç—å.")
        return

    question_id = call.data.split('_')[1]
    if question_id not in DATA['pending']:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç.")
        return

    user_id = DATA['pending'].pop(question_id)
    save_data()

    set_user_state(call.from_user.id, f"replying_{question_id}")
    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, f"üìù –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id}:")
    bot.register_next_step_handler(call.message, process_admin_reply, question_id, user_id, call.from_user.full_name)

def process_admin_reply(message, question_id, user_id, admin_name):
    if message.from_user.id not in ADMINS:
        return
    
    clear_user_state(message.from_user.id)

    answer_text = message.text
    try:
        history = DATA['history'].get(str(user_id), [])
        for entry in reversed(history):
            if entry['id'] == question_id:
                entry['answer'] = answer_text
                break

        question_text = entry.get("question", "–í–∞—à –≤–æ–ø—Ä–æ—Å")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data=f"getanswer_{question_id}"))
        bot.send_message(user_id, f"üì® –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n\n{question_text}", reply_markup=markup)
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMINS:
            try:
                msg_id = DATA['sent_messages'].get(question_id)
                if msg_id:
                    bot.edit_message_text(
                        f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{question_id} –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–æ–º {admin_name}.",
                        chat_id=admin_id,
                        message_id=msg_id
                    )
            except:
                pass

        if question_id in DATA['sent_messages']:
            del DATA['sent_messages'][question_id]

        save_data()

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("getanswer_"))
def handle_get_answer(call):
    user_id = str(call.from_user.id)
    question_id = call.data.split("_")[1]

    history = DATA['history'].get(user_id, [])
    found = None

    for entry in history:
        if entry.get("id") == question_id:
            found = entry
            break

    if found:
        if found.get("rejected"):
            reason = found.get("rejection_reason", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            bot.answer_callback_query(call.id)
            bot.send_message(call.from_user.id, f"‚ùå –í–∞—à –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        elif found.get("answer"):
            bot.answer_callback_query(call.id)
            bot.send_message(call.from_user.id, f"üì¨ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id}:\n\n{found['answer']}")
        else:
            bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤.")
    else:
        bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def run_web():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è UptimeRobot"""
    port = int(os.environ.get('PORT', 5000))
    while True:
        try:
            print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=run_web)
    web_thread.daemon = True
    web_thread.start()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(2)
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è UptimeRobot –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
